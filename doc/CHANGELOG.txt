v1.7.1 5-Feb-2017
------------------

- removed dependency on javax.xml.bind.DatatypeConverter so it works
  on Android again. Thanks to Karsten Ohme

- fixed coding ENUMERATED bug, introduced in release 1.7.0, thanks to
  David Jenlenc

- fixed two more bugs when encoding and decoding REALs, thanks to htw
  saar


v1.7.0 27-Jan-2017
------------------

- fixed bug that the tag default of one module would override that of
  another module.

- added support for explicitly tagged SEQUENCE, SET, SEQUENCE/SET OF,
  CHOICE and ANY

- JAXB syntax mode of jasn-compiler is now default. Old syntax can be
  enabled using the legacy (-l) flag.

- numerous minor improvements to jasn1-compiler to create more
  comprehensible Java classes.

- BerInteger is now based on BigInteger instead of long. Thus it can
  code integer values larger than 8 bytes.

- fixed name clash when a sequence element of type SEQUENCE OF has the
  same name as the SEQUENCE OF type, e.g. SEQUENCE { test SEQUENCE OF
  Test }

- fixed BerReal bug when mantissa is larger than Integer.MAX

- added encode and decode functions to all generated classes that take
  only a stream as parameter

v1.6.0 03-Oct-2016
------------------

- added support for automatic tagging

- added support for empty SEQUENCEs

- hyphens in type names are now removed instead of replaced by
  underscore, the next letter after the hyphen is capitalized.

- when compiling one can enable the JAXB mode which generates classes
  that are more similar to those generated by the JAXB compiler

- added support for untagged ANY fields

- subclasses of SEQUENCE OF CHOICE .. and SEQUENCE OF SEQUENCE .. are
  now name "CHOICE" and "SEQUENCE" respectively.

- extension marker "..." can now be parsed, but is ignored for now

- multi-line comments using /* */ can now be parsed

- parser can now handle sequence/set/choice elements with no
  identifier

- fixed coding of explicitly tagged choices whithin choices

- added support for UTCTime

- fixed support for SEQUENCE OFs of tagged types such as SEQUENCE OF [3]
  INTEGER

v1.5.0 10-Dec-2015
------------------

- version of jasn1 compiler is inserted in generated class header
  comment
- added toString() method to all types
- a correct EOFException is now thrown when an unexpected end of input
  stream is reached while decoding.
- removed some unnecessary checks while decoding sequences.
- made encoding sequences, sets and choices more efficient by encoding
  the identfier directly.
- made jasn-compiler significantly faster by removing unnecessary
  conversion to XML structure.
- removed logger and command line parsing dependencies of the
  jasn1-compiler.

New features thanks to funding by the European Space Agency & Telespazio VEGA:

- added support for parsing explicit and implicit retagging such as
  MyType2 :== [2] MyType1
- added support for parsing inter-dependent ASN.1 modules from several
  files
- added support for implicitly tagged choices whithin choices by
  forcing the tag to be explicit
- added support for parsing size constraints such as (SIZE(n..m))
- added support for parsing constraints of the form "(FROM (ALL EXCEPT
  " "))"

v1.4 28-Jul-2014
----------------
- renamed jasn1-ber project to jasn1
- fixed bug in constructor of BerBitString

v1.3 14-May-2014
----------------
- fixed decoding of CHOICEs within SETs
- made decoding SETs more efficient
- minor fixes to build file to work with Gradle v1.11
- fixed decoding large BerIntegers (thanks to Helge Parzyjegla,
  University of Rostock)

v1.2.1 27-Jan-2014
------------------
- removed final from BerByteArrayOutputStream 

v1.2 10-Jan-2014
----------------
- ANY elements are now encoded/decoded.
- in some cases it could be favorable not to encode/decode elements of
  type any because it would involve big array copying. Therefor the
  compiler supports. The alternative element type called ANY_NODECODE
  which can be used inside the ASN.1 file in order to generate Java
  code that will not decod nor encode elements of these types.
- clarified licenses of dependencies.
- jasn1-compiler is now GPLv3 in order to compatible with Apache 2.0
  of BinaryNotes.
- jasn1-ber continues to be LGPLv2.1 or later
- libs are now in the central maven repository

v1.1.4 03-Jul-2013
------------------
- generated classes are declared final for better performance
- BerByteArrayOutputstream can be reset using reset() for reuse

v1.1.3 23-Aug-2012
------------------
- allow decoding of empty object identifiers

v1.1.2 14-Mai-2012
------------------
- improved efficiency in BerVisibleString
- modified BerBitString so it can be empty when decoded

v1.1.1 20-Feb-2012
------------------
- fix in BerIdentifier.decodeAndCheck(), thanks to Mr.Bostijancic from TU-Wien

v1.1.0 14-Feb-2012
------------------
- the default tagging can now be changed to implicit using the
  following kind of statement: SAMPLE DEFINITIONS IMPLICIT TAGS ::=
  ...
- the character '-' is now replaced by the '_' character in the name
  of Java classes
- support for indefinit length when decoding (not for encoding), has
  to explicitely enabled using the -il option
- SEQUENCE elements of type CHOICE that have not explicit tag are now
  supported by jASN1
- CHOICEs can now have sub CHOICES without tags. Only a warning is
  printed that this could one CHOICE could be integrated into another
  for better performance

v1.0.7 06-Feb-2012
------------------
- minor changes to gradle build file
- bug fix in decoding empty OctetString

v1.0.6 01-Feb-2012
------------------
- added a Windows batch file to execute jasn1-compiler in Windows

v1.0.5 30-Jan-2012
------------------
- fixed another bug in decoding of negative numbers

v1.0.4 27-Jan-2012
------------------
- fixed bug in decoding of negative integers in BerInteger

v1.0.3 19-Jan-2012
------------------
- modified BerByteArrayOutputStream so its buffer and index are public and added two new constructors

v1.0.2 17-Jan-2012
------------------
- added BerBitString(byte[]) constructor

v1.0.1 13-Jan-2012
------------------
- fixed bug in coding of several byte length field

1.0.0 06-Dec-2011
-----------------
- added getByteBuffer() function for BerByteArrayOutputStream so arrays don't always have to be copied
- add code byte array and encodeAndSave function to all structures for better encoding performance when
  encoding the same structure several times 
- numerous bug fixes
- all basic types are now supported

0.9.0 21-Nov-2011
-----------------
- first version

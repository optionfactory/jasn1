/**
 * This class file was automatically generated by jASN1 v1.7.1 (http://www.openmuc.org)
 */

package org.openmuc.jasn1.compiler.x690_ber_example;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class Name {

	public static final BerTag tag = new BerTag(BerTag.APPLICATION_CLASS, BerTag.CONSTRUCTED, 1);

	public byte[] code = null;
	private BerVisibleString givenName = null;
	private BerVisibleString initial = null;
	private BerVisibleString familyName = null;
	
	public Name() {
	}

	public Name(byte[] code) {
		this.code = code;
	}

	public void setGivenName(BerVisibleString givenName) {
		this.givenName = givenName;
	}

	public BerVisibleString getGivenName() {
		return givenName;
	}

	public void setInitial(BerVisibleString initial) {
		this.initial = initial;
	}

	public BerVisibleString getInitial() {
		return initial;
	}

	public void setFamilyName(BerVisibleString familyName) {
		this.familyName = familyName;
	}

	public BerVisibleString getFamilyName() {
		return familyName;
	}

	public int encode(BerByteArrayOutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(BerByteArrayOutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += familyName.encode(os, true);
		
		codeLength += initial.encode(os, true);
		
		codeLength += givenName.encode(os, true);
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerVisibleString.tag)) {
			givenName = new BerVisibleString();
			subCodeLength += givenName.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerVisibleString.tag)) {
			initial = new BerVisibleString();
			subCodeLength += initial.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerVisibleString.tag)) {
			familyName = new BerVisibleString();
			subCodeLength += familyName.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE{");
		sb.append("givenName: ").append(givenName);
		
		sb.append(", ");
		sb.append("initial: ").append(initial);
		
		sb.append(", ");
		sb.append("familyName: ").append(familyName);
		
		sb.append("}");
		return sb.toString();
	}

}


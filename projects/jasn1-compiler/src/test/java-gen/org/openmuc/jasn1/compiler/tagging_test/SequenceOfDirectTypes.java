/**
 * This class file was automatically generated by jASN1 v1.7.1 (http://www.openmuc.org)
 */

package org.openmuc.jasn1.compiler.tagging_test;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class SequenceOfDirectTypes {

	public static class UntaggedChoice {

		public byte[] code = null;
		private BerInteger myInteger = null;
		private BerBoolean myBoolean = null;
		
		public UntaggedChoice() {
		}

		public UntaggedChoice(byte[] code) {
			this.code = code;
		}

		public void setMyInteger(BerInteger myInteger) {
			this.myInteger = myInteger;
		}

		public BerInteger getMyInteger() {
			return myInteger;
		}

		public void setMyBoolean(BerBoolean myBoolean) {
			this.myBoolean = myBoolean;
		}

		public BerBoolean getMyBoolean() {
			return myBoolean;
		}

		public int encode(BerByteArrayOutputStream os) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (myBoolean != null) {
				codeLength += myBoolean.encode(os, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 4
				os.write(0x84);
				codeLength += 1;
				return codeLength;
			}
			
			if (myInteger != null) {
				codeLength += myInteger.encode(os, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 3
				os.write(0x83);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding BerChoice: No item in choice was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
				myInteger = new BerInteger();
				codeLength += myInteger.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
				myBoolean = new BerBoolean();
				codeLength += myBoolean.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding BerChoice: Tag matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
			encode(os);
			code = os.getArray();
		}

		public String toString() {
			if (myInteger != null) {
				return "CHOICE{myInteger: " + myInteger + "}";
			}

			if (myBoolean != null) {
				return "CHOICE{myBoolean: " + myBoolean + "}";
			}

			return "unknown";
		}

	}

	public static class TaggedChoice {

		public byte[] code = null;
		private BerInteger myInteger = null;
		private BerBoolean myBoolean = null;
		
		public TaggedChoice() {
		}

		public TaggedChoice(byte[] code) {
			this.code = code;
		}

		public void setMyInteger(BerInteger myInteger) {
			this.myInteger = myInteger;
		}

		public BerInteger getMyInteger() {
			return myInteger;
		}

		public void setMyBoolean(BerBoolean myBoolean) {
			this.myBoolean = myBoolean;
		}

		public BerBoolean getMyBoolean() {
			return myBoolean;
		}

		public int encode(BerByteArrayOutputStream os) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (myBoolean != null) {
				codeLength += myBoolean.encode(os, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 4
				os.write(0x84);
				codeLength += 1;
				return codeLength;
			}
			
			if (myInteger != null) {
				codeLength += myInteger.encode(os, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 3
				os.write(0x83);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding BerChoice: No item in choice was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
				myInteger = new BerInteger();
				codeLength += myInteger.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
				myBoolean = new BerBoolean();
				codeLength += myBoolean.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding BerChoice: Tag matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
			encode(os);
			code = os.getArray();
		}

		public String toString() {
			if (myInteger != null) {
				return "CHOICE{myInteger: " + myInteger + "}";
			}

			if (myBoolean != null) {
				return "CHOICE{myBoolean: " + myBoolean + "}";
			}

			return "unknown";
		}

	}

	public static class UntaggedChoice2 {

		public byte[] code = null;
		private BerInteger myInteger = null;
		private BerBoolean myBoolean = null;
		
		public UntaggedChoice2() {
		}

		public UntaggedChoice2(byte[] code) {
			this.code = code;
		}

		public void setMyInteger(BerInteger myInteger) {
			this.myInteger = myInteger;
		}

		public BerInteger getMyInteger() {
			return myInteger;
		}

		public void setMyBoolean(BerBoolean myBoolean) {
			this.myBoolean = myBoolean;
		}

		public BerBoolean getMyBoolean() {
			return myBoolean;
		}

		public int encode(BerByteArrayOutputStream os) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (myBoolean != null) {
				codeLength += myBoolean.encode(os, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 9
				os.write(0x89);
				codeLength += 1;
				return codeLength;
			}
			
			if (myInteger != null) {
				codeLength += myInteger.encode(os, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 8
				os.write(0x88);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding BerChoice: No item in choice was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
				myInteger = new BerInteger();
				codeLength += myInteger.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
				myBoolean = new BerBoolean();
				codeLength += myBoolean.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding BerChoice: Tag matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
			encode(os);
			code = os.getArray();
		}

		public String toString() {
			if (myInteger != null) {
				return "CHOICE{myInteger: " + myInteger + "}";
			}

			if (myBoolean != null) {
				return "CHOICE{myBoolean: " + myBoolean + "}";
			}

			return "unknown";
		}

	}

	public static final BerTag tag = new BerTag(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 43);

	public byte[] code = null;
	private BerInteger untaggedInt = null;
	private BerInteger explicitlyTaggedInt = null;
	private BerInteger implicitlyTaggedInt = null;
	private UntaggedChoice untaggedChoice = null;
	private TaggedChoice taggedChoice = null;
	private BerAny taggedAny = null;
	private BerAnyNoDecode taggedAnyNoDecode = null;
	private UntaggedChoice2 untaggedChoice2 = null;
	
	public SequenceOfDirectTypes() {
	}

	public SequenceOfDirectTypes(byte[] code) {
		this.code = code;
	}

	public void setUntaggedInt(BerInteger untaggedInt) {
		this.untaggedInt = untaggedInt;
	}

	public BerInteger getUntaggedInt() {
		return untaggedInt;
	}

	public void setExplicitlyTaggedInt(BerInteger explicitlyTaggedInt) {
		this.explicitlyTaggedInt = explicitlyTaggedInt;
	}

	public BerInteger getExplicitlyTaggedInt() {
		return explicitlyTaggedInt;
	}

	public void setImplicitlyTaggedInt(BerInteger implicitlyTaggedInt) {
		this.implicitlyTaggedInt = implicitlyTaggedInt;
	}

	public BerInteger getImplicitlyTaggedInt() {
		return implicitlyTaggedInt;
	}

	public void setUntaggedChoice(UntaggedChoice untaggedChoice) {
		this.untaggedChoice = untaggedChoice;
	}

	public UntaggedChoice getUntaggedChoice() {
		return untaggedChoice;
	}

	public void setTaggedChoice(TaggedChoice taggedChoice) {
		this.taggedChoice = taggedChoice;
	}

	public TaggedChoice getTaggedChoice() {
		return taggedChoice;
	}

	public void setTaggedAny(BerAny taggedAny) {
		this.taggedAny = taggedAny;
	}

	public BerAny getTaggedAny() {
		return taggedAny;
	}

	public void setTaggedAnyNoDecode(BerAnyNoDecode taggedAnyNoDecode) {
		this.taggedAnyNoDecode = taggedAnyNoDecode;
	}

	public BerAnyNoDecode getTaggedAnyNoDecode() {
		return taggedAnyNoDecode;
	}

	public void setUntaggedChoice2(UntaggedChoice2 untaggedChoice2) {
		this.untaggedChoice2 = untaggedChoice2;
	}

	public UntaggedChoice2 getUntaggedChoice2() {
		return untaggedChoice2;
	}

	public int encode(BerByteArrayOutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(BerByteArrayOutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (untaggedChoice2 != null) {
			codeLength += untaggedChoice2.encode(os);
		}
		
		if (taggedAnyNoDecode != null) {
			sublength = taggedAnyNoDecode.encode(os);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(os, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
			os.write(0xA7);
			codeLength += 1;
		}
		
		sublength = taggedAny.encode(os);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(os, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
		os.write(0xA6);
		codeLength += 1;
		
		sublength = taggedChoice.encode(os);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(os, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
		os.write(0xA5);
		codeLength += 1;
		
		codeLength += untaggedChoice.encode(os);
		
		codeLength += implicitlyTaggedInt.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 2
		os.write(0x82);
		codeLength += 1;
		
		sublength = explicitlyTaggedInt.encode(os, true);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(os, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
		os.write(0xA1);
		codeLength += 1;
		
		codeLength += untaggedInt.encode(os, true);
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerInteger.tag)) {
			untaggedInt = new BerInteger();
			subCodeLength += untaggedInt.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			subCodeLength += length.decode(is);
			explicitlyTaggedInt = new BerInteger();
			subCodeLength += explicitlyTaggedInt.decode(is, true);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			implicitlyTaggedInt = new BerInteger();
			subCodeLength += implicitlyTaggedInt.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		untaggedChoice = new UntaggedChoice();
		subCodeLength += untaggedChoice.decode(is, berTag);
		subCodeLength += berTag.decode(is);
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			subCodeLength += length.decode(is);
			taggedChoice = new TaggedChoice();
			subCodeLength += taggedChoice.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
			subCodeLength += length.decode(is);
			taggedAny = new BerAny();
			subCodeLength += taggedAny.decode(is, length.val);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
			subCodeLength += length.decode(is);
			taggedAnyNoDecode = new BerAnyNoDecode();
			subCodeLength += taggedAnyNoDecode.decode(is, length.val);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		untaggedChoice2 = new UntaggedChoice2();
		int choiceDecodeLength = untaggedChoice2.decode(is, berTag);
		subCodeLength += choiceDecodeLength;
		if (subCodeLength == totalLength) {
			return codeLength;
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE{");
		sb.append("untaggedInt: ").append(untaggedInt);
		
		sb.append(", ");
		sb.append("explicitlyTaggedInt: ").append(explicitlyTaggedInt);
		
		sb.append(", ");
		sb.append("implicitlyTaggedInt: ").append(implicitlyTaggedInt);
		
		sb.append(", ");
		sb.append("untaggedChoice: ").append(untaggedChoice);
		
		sb.append(", ");
		sb.append("taggedChoice: ").append(taggedChoice);
		
		sb.append(", ");
		sb.append("taggedAny: ").append(taggedAny);
		
		if (taggedAnyNoDecode != null) {
			sb.append(", ");
			sb.append("taggedAnyNoDecode: ").append(taggedAnyNoDecode);
		}
		
		if (untaggedChoice2 != null) {
			sb.append(", ");
			sb.append("untaggedChoice2: ").append(untaggedChoice2);
		}
		
		sb.append("}");
		return sb.toString();
	}

}


/**
 * This class file was automatically generated by jASN1 v1.7.1 (http://www.openmuc.org)
 */

package org.openmuc.jasn1.compiler.compile_test;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class SequenceOfAll {

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	public BerInteger myInteger = null;
	public BerInteger myInteger2 = null;
	public BerBoolean myBoolean = null;
	public BerBitString bitString = null;
	public BerEnum enumerated = null;
	public BerGeneralizedTime generalizedTime = null;
	public BerNull myNull = null;
	public BerObjectIdentifier objectIdentifier = null;
	public BerOctetString octetString = null;
	public BerReal real = null;
	public IntegerWithValues testIntegerWithValues = null;
	public OctetStringWithSize testOctetStringWithSize = null;
	public SequenceWithSize testSequenceWithSize = null;
	public BerBMPString bmpString = null;
	public BerGeneralString generalString = null;
	public BerGraphicString graphicString = null;
	public BerIA5String iA5String = null;
	public BerNumericString numericString = null;
	public BerPrintableString printableString = null;
	public BerTeletexString teletexString = null;
	public BerUniversalString universalString = null;
	public BerUTF8String utf8String = null;
	public BerVideotexString videotexString = null;
	public BerVisibleString visibleString = null;
	public BerAny any = null;
	public MySequence mySequence = null;
	public MyChoice myChoice = null;
	
	public SequenceOfAll() {
	}

	public SequenceOfAll(byte[] code) {
		this.code = code;
	}

	public SequenceOfAll(BerInteger myInteger, BerInteger myInteger2, BerBoolean myBoolean, BerBitString bitString, BerEnum enumerated, BerGeneralizedTime generalizedTime, BerNull myNull, BerObjectIdentifier objectIdentifier, BerOctetString octetString, BerReal real, IntegerWithValues testIntegerWithValues, OctetStringWithSize testOctetStringWithSize, SequenceWithSize testSequenceWithSize, BerBMPString bmpString, BerGeneralString generalString, BerGraphicString graphicString, BerIA5String iA5String, BerNumericString numericString, BerPrintableString printableString, BerTeletexString teletexString, BerUniversalString universalString, BerUTF8String utf8String, BerVideotexString videotexString, BerVisibleString visibleString, BerAny any, MySequence mySequence, MyChoice myChoice) {
		this.myInteger = myInteger;
		this.myInteger2 = myInteger2;
		this.myBoolean = myBoolean;
		this.bitString = bitString;
		this.enumerated = enumerated;
		this.generalizedTime = generalizedTime;
		this.myNull = myNull;
		this.objectIdentifier = objectIdentifier;
		this.octetString = octetString;
		this.real = real;
		this.testIntegerWithValues = testIntegerWithValues;
		this.testOctetStringWithSize = testOctetStringWithSize;
		this.testSequenceWithSize = testSequenceWithSize;
		this.bmpString = bmpString;
		this.generalString = generalString;
		this.graphicString = graphicString;
		this.iA5String = iA5String;
		this.numericString = numericString;
		this.printableString = printableString;
		this.teletexString = teletexString;
		this.universalString = universalString;
		this.utf8String = utf8String;
		this.videotexString = videotexString;
		this.visibleString = visibleString;
		this.any = any;
		this.mySequence = mySequence;
		this.myChoice = myChoice;
	}

	public int encode(BerByteArrayOutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(BerByteArrayOutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		codeLength += myChoice.encode(os);
		
		codeLength += mySequence.encode(os, true);
		
		sublength = any.encode(os);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(os, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
		os.write(0xA9);
		codeLength += 1;
		
		codeLength += visibleString.encode(os, true);
		
		codeLength += videotexString.encode(os, true);
		
		codeLength += utf8String.encode(os, true);
		
		codeLength += universalString.encode(os, true);
		
		codeLength += teletexString.encode(os, true);
		
		codeLength += printableString.encode(os, true);
		
		codeLength += numericString.encode(os, true);
		
		codeLength += iA5String.encode(os, true);
		
		codeLength += graphicString.encode(os, true);
		
		codeLength += generalString.encode(os, true);
		
		codeLength += bmpString.encode(os, true);
		
		codeLength += testSequenceWithSize.encode(os, true);
		
		codeLength += testOctetStringWithSize.encode(os, true);
		
		codeLength += testIntegerWithValues.encode(os, true);
		
		codeLength += real.encode(os, true);
		
		codeLength += octetString.encode(os, true);
		
		codeLength += objectIdentifier.encode(os, true);
		
		codeLength += myNull.encode(os, true);
		
		codeLength += generalizedTime.encode(os, true);
		
		codeLength += enumerated.encode(os, true);
		
		codeLength += bitString.encode(os, true);
		
		codeLength += myBoolean.encode(os, true);
		
		codeLength += myInteger2.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 31
		os.write(0x1F);
		os.write(0x9F);
		codeLength += 2;
		
		if (myInteger != null) {
			codeLength += myInteger.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 30
			os.write(0x9E);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		if (totalLength == -1) {
			subCodeLength += berTag.decode(is);

			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 30)) {
				myInteger = new BerInteger();
				subCodeLength += myInteger.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 31)) {
				myInteger2 = new BerInteger();
				subCodeLength += myInteger2.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerBoolean.tag)) {
				myBoolean = new BerBoolean();
				subCodeLength += myBoolean.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerBitString.tag)) {
				bitString = new BerBitString();
				subCodeLength += bitString.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerEnum.tag)) {
				enumerated = new BerEnum();
				subCodeLength += enumerated.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerGeneralizedTime.tag)) {
				generalizedTime = new BerGeneralizedTime();
				subCodeLength += generalizedTime.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerNull.tag)) {
				myNull = new BerNull();
				subCodeLength += myNull.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerObjectIdentifier.tag)) {
				objectIdentifier = new BerObjectIdentifier();
				subCodeLength += objectIdentifier.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerOctetString.tag)) {
				octetString = new BerOctetString();
				subCodeLength += octetString.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerReal.tag)) {
				real = new BerReal();
				subCodeLength += real.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(IntegerWithValues.tag)) {
				testIntegerWithValues = new IntegerWithValues();
				subCodeLength += testIntegerWithValues.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(OctetStringWithSize.tag)) {
				testOctetStringWithSize = new OctetStringWithSize();
				subCodeLength += testOctetStringWithSize.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(SequenceWithSize.tag)) {
				testSequenceWithSize = new SequenceWithSize();
				subCodeLength += testSequenceWithSize.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerBMPString.tag)) {
				bmpString = new BerBMPString();
				subCodeLength += bmpString.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerGeneralString.tag)) {
				generalString = new BerGeneralString();
				subCodeLength += generalString.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerGraphicString.tag)) {
				graphicString = new BerGraphicString();
				subCodeLength += graphicString.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerIA5String.tag)) {
				iA5String = new BerIA5String();
				subCodeLength += iA5String.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerNumericString.tag)) {
				numericString = new BerNumericString();
				subCodeLength += numericString.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerPrintableString.tag)) {
				printableString = new BerPrintableString();
				subCodeLength += printableString.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTeletexString.tag)) {
				teletexString = new BerTeletexString();
				subCodeLength += teletexString.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerUniversalString.tag)) {
				universalString = new BerUniversalString();
				subCodeLength += universalString.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerUTF8String.tag)) {
				utf8String = new BerUTF8String();
				subCodeLength += utf8String.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerVideotexString.tag)) {
				videotexString = new BerVideotexString();
				subCodeLength += videotexString.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerVisibleString.tag)) {
				visibleString = new BerVisibleString();
				subCodeLength += visibleString.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
				codeLength += length.decode(is);
				any = new BerAny();
				subCodeLength += any.decode(is, length.val);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(MySequence.tag)) {
				mySequence = new MySequence();
				subCodeLength += mySequence.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			myChoice = new MyChoice();
			int choiceDecodeLength = myChoice.decode(is, berTag);
			if (choiceDecodeLength != 0) {
				subCodeLength += choiceDecodeLength;
				subCodeLength += berTag.decode(is);
			}
			else {
				myChoice = null;
			}

			int nextByte = is.read();
			if (berTag.tagNumber != 0 || berTag.tagClass != 0 || berTag.primitive != 0
			|| nextByte != 0) {
				if (nextByte == -1) {
					throw new EOFException("Unexpected end of input stream.");
				}
				throw new IOException("Decoded sequence has wrong end of contents octets");
			}
			codeLength += subCodeLength + 1;
			return codeLength;
		}

		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 30)) {
			myInteger = new BerInteger();
			subCodeLength += myInteger.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 31)) {
			myInteger2 = new BerInteger();
			subCodeLength += myInteger2.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerBoolean.tag)) {
			myBoolean = new BerBoolean();
			subCodeLength += myBoolean.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerBitString.tag)) {
			bitString = new BerBitString();
			subCodeLength += bitString.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerEnum.tag)) {
			enumerated = new BerEnum();
			subCodeLength += enumerated.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerGeneralizedTime.tag)) {
			generalizedTime = new BerGeneralizedTime();
			subCodeLength += generalizedTime.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerNull.tag)) {
			myNull = new BerNull();
			subCodeLength += myNull.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerObjectIdentifier.tag)) {
			objectIdentifier = new BerObjectIdentifier();
			subCodeLength += objectIdentifier.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerOctetString.tag)) {
			octetString = new BerOctetString();
			subCodeLength += octetString.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerReal.tag)) {
			real = new BerReal();
			subCodeLength += real.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(IntegerWithValues.tag)) {
			testIntegerWithValues = new IntegerWithValues();
			subCodeLength += testIntegerWithValues.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(OctetStringWithSize.tag)) {
			testOctetStringWithSize = new OctetStringWithSize();
			subCodeLength += testOctetStringWithSize.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(SequenceWithSize.tag)) {
			testSequenceWithSize = new SequenceWithSize();
			subCodeLength += testSequenceWithSize.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerBMPString.tag)) {
			bmpString = new BerBMPString();
			subCodeLength += bmpString.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerGeneralString.tag)) {
			generalString = new BerGeneralString();
			subCodeLength += generalString.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerGraphicString.tag)) {
			graphicString = new BerGraphicString();
			subCodeLength += graphicString.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerIA5String.tag)) {
			iA5String = new BerIA5String();
			subCodeLength += iA5String.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerNumericString.tag)) {
			numericString = new BerNumericString();
			subCodeLength += numericString.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerPrintableString.tag)) {
			printableString = new BerPrintableString();
			subCodeLength += printableString.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTeletexString.tag)) {
			teletexString = new BerTeletexString();
			subCodeLength += teletexString.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerUniversalString.tag)) {
			universalString = new BerUniversalString();
			subCodeLength += universalString.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerUTF8String.tag)) {
			utf8String = new BerUTF8String();
			subCodeLength += utf8String.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerVideotexString.tag)) {
			videotexString = new BerVideotexString();
			subCodeLength += videotexString.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerVisibleString.tag)) {
			visibleString = new BerVisibleString();
			subCodeLength += visibleString.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
			subCodeLength += length.decode(is);
			any = new BerAny();
			subCodeLength += any.decode(is, length.val);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(MySequence.tag)) {
			mySequence = new MySequence();
			subCodeLength += mySequence.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		myChoice = new MyChoice();
		subCodeLength += myChoice.decode(is, berTag);
		if (subCodeLength == totalLength) {
			return codeLength;
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE{");
		boolean firstSelectedElement = true;
		if (myInteger != null) {
			sb.append("myInteger: ").append(myInteger);
			firstSelectedElement = false;
		}
		
		if (!firstSelectedElement) {
			sb.append(", ");
		}
		sb.append("myInteger2: ").append(myInteger2);
		
		sb.append(", ");
		sb.append("myBoolean: ").append(myBoolean);
		
		sb.append(", ");
		sb.append("bitString: ").append(bitString);
		
		sb.append(", ");
		sb.append("enumerated: ").append(enumerated);
		
		sb.append(", ");
		sb.append("generalizedTime: ").append(generalizedTime);
		
		sb.append(", ");
		sb.append("myNull: ").append(myNull);
		
		sb.append(", ");
		sb.append("objectIdentifier: ").append(objectIdentifier);
		
		sb.append(", ");
		sb.append("octetString: ").append(octetString);
		
		sb.append(", ");
		sb.append("real: ").append(real);
		
		sb.append(", ");
		sb.append("testIntegerWithValues: ").append(testIntegerWithValues);
		
		sb.append(", ");
		sb.append("testOctetStringWithSize: ").append(testOctetStringWithSize);
		
		sb.append(", ");
		sb.append("testSequenceWithSize: ").append(testSequenceWithSize);
		
		sb.append(", ");
		sb.append("bmpString: ").append(bmpString);
		
		sb.append(", ");
		sb.append("generalString: ").append(generalString);
		
		sb.append(", ");
		sb.append("graphicString: ").append(graphicString);
		
		sb.append(", ");
		sb.append("iA5String: ").append(iA5String);
		
		sb.append(", ");
		sb.append("numericString: ").append(numericString);
		
		sb.append(", ");
		sb.append("printableString: ").append(printableString);
		
		sb.append(", ");
		sb.append("teletexString: ").append(teletexString);
		
		sb.append(", ");
		sb.append("universalString: ").append(universalString);
		
		sb.append(", ");
		sb.append("utf8String: ").append(utf8String);
		
		sb.append(", ");
		sb.append("videotexString: ").append(videotexString);
		
		sb.append(", ");
		sb.append("visibleString: ").append(visibleString);
		
		sb.append(", ");
		sb.append("any: ").append(any);
		
		sb.append(", ");
		sb.append("mySequence: ").append(mySequence);
		
		sb.append(", ");
		sb.append("myChoice: ").append(myChoice);
		
		sb.append("}");
		return sb.toString();
	}

}


/**
 * This class file was automatically generated by jASN1 v1.7.1 (http://www.openmuc.org)
 */

package org.openmuc.jasn1.compiler.pkix1implicit88;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;

import org.openmuc.jasn1.compiler.pkix1explicit88.*;
import org.openmuc.jasn1.compiler.rspdefinitions.*;

public class DistributionPointName {

	public byte[] code = null;
	public GeneralNames fullName = null;
	public RelativeDistinguishedName nameRelativeToCRLIssuer = null;
	
	public DistributionPointName() {
	}

	public DistributionPointName(byte[] code) {
		this.code = code;
	}

	public DistributionPointName(GeneralNames fullName, RelativeDistinguishedName nameRelativeToCRLIssuer) {
		this.fullName = fullName;
		this.nameRelativeToCRLIssuer = nameRelativeToCRLIssuer;
	}

	public int encode(BerByteArrayOutputStream os) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			return code.length;
		}

		int codeLength = 0;
		if (nameRelativeToCRLIssuer != null) {
			codeLength += nameRelativeToCRLIssuer.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
			os.write(0xA1);
			codeLength += 1;
			return codeLength;
		}
		
		if (fullName != null) {
			codeLength += fullName.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
			os.write(0xA0);
			codeLength += 1;
			return codeLength;
		}
		
		throw new IOException("Error encoding BerChoice: No item in choice was selected.");
	}

	public int decode(InputStream is) throws IOException {
		return decode(is, null);
	}

	public int decode(InputStream is, BerTag berTag) throws IOException {

		int codeLength = 0;
		BerTag passedTag = berTag;

		if (berTag == null) {
			berTag = new BerTag();
			codeLength += berTag.decode(is);
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			fullName = new GeneralNames();
			codeLength += fullName.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			nameRelativeToCRLIssuer = new RelativeDistinguishedName();
			codeLength += nameRelativeToCRLIssuer.decode(is, false);
			return codeLength;
		}

		if (passedTag != null) {
			return 0;
		}

		throw new IOException("Error decoding BerChoice: Tag matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os);
		code = os.getArray();
	}

	public String toString() {
		if (fullName != null) {
			return "CHOICE{fullName: " + fullName + "}";
		}

		if (nameRelativeToCRLIssuer != null) {
			return "CHOICE{nameRelativeToCRLIssuer: " + nameRelativeToCRLIssuer + "}";
		}

		return "unknown";
	}

}


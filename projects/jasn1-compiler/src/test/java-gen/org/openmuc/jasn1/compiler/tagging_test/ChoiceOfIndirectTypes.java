/**
 * This class file was automatically generated by jASN1 v1.7.1 (http://www.openmuc.org)
 */

package org.openmuc.jasn1.compiler.tagging_test;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class ChoiceOfIndirectTypes {

	public byte[] code = null;
	private UntaggedInteger untaggedInt = null;
	private ExplicitlyTaggedInteger untaggedInt2 = null;
	private ImplicitlyTaggedInteger untaggedInt3 = null;
	private UntaggedInteger explicitlyTaggedInt = null;
	private ExplicitlyTaggedInteger explicitlyTaggedInt2 = null;
	private ImplicitlyTaggedInteger explicitlyTaggedInt3 = null;
	private UntaggedInteger implicitlyTaggedInt = null;
	private ExplicitlyTaggedInteger implicitlyTaggedInt2 = null;
	private ImplicitlyTaggedInteger implicitlyTaggedInt3 = null;
	private UntaggedChoice untaggedChoice = null;
	private TaggedChoice untaggedChoice2 = null;
	private UntaggedChoice taggedChoice = null;
	private TaggedChoice taggedChoice2 = null;
	private TaggedAny untaggedAny = null;
	private UntaggedAny taggedAny = null;
	private TaggedAny taggedAny2 = null;
	private TaggedAnyNoDecode untaggedAnyNoDecode = null;
	private UntaggedAnyNoDecode taggedAnyNoDecode = null;
	private TaggedAnyNoDecode taggedAnyNoDecode2 = null;
	
	public ChoiceOfIndirectTypes() {
	}

	public ChoiceOfIndirectTypes(byte[] code) {
		this.code = code;
	}

	public void setUntaggedInt(UntaggedInteger untaggedInt) {
		this.untaggedInt = untaggedInt;
	}

	public UntaggedInteger getUntaggedInt() {
		return untaggedInt;
	}

	public void setUntaggedInt2(ExplicitlyTaggedInteger untaggedInt2) {
		this.untaggedInt2 = untaggedInt2;
	}

	public ExplicitlyTaggedInteger getUntaggedInt2() {
		return untaggedInt2;
	}

	public void setUntaggedInt3(ImplicitlyTaggedInteger untaggedInt3) {
		this.untaggedInt3 = untaggedInt3;
	}

	public ImplicitlyTaggedInteger getUntaggedInt3() {
		return untaggedInt3;
	}

	public void setExplicitlyTaggedInt(UntaggedInteger explicitlyTaggedInt) {
		this.explicitlyTaggedInt = explicitlyTaggedInt;
	}

	public UntaggedInteger getExplicitlyTaggedInt() {
		return explicitlyTaggedInt;
	}

	public void setExplicitlyTaggedInt2(ExplicitlyTaggedInteger explicitlyTaggedInt2) {
		this.explicitlyTaggedInt2 = explicitlyTaggedInt2;
	}

	public ExplicitlyTaggedInteger getExplicitlyTaggedInt2() {
		return explicitlyTaggedInt2;
	}

	public void setExplicitlyTaggedInt3(ImplicitlyTaggedInteger explicitlyTaggedInt3) {
		this.explicitlyTaggedInt3 = explicitlyTaggedInt3;
	}

	public ImplicitlyTaggedInteger getExplicitlyTaggedInt3() {
		return explicitlyTaggedInt3;
	}

	public void setImplicitlyTaggedInt(UntaggedInteger implicitlyTaggedInt) {
		this.implicitlyTaggedInt = implicitlyTaggedInt;
	}

	public UntaggedInteger getImplicitlyTaggedInt() {
		return implicitlyTaggedInt;
	}

	public void setImplicitlyTaggedInt2(ExplicitlyTaggedInteger implicitlyTaggedInt2) {
		this.implicitlyTaggedInt2 = implicitlyTaggedInt2;
	}

	public ExplicitlyTaggedInteger getImplicitlyTaggedInt2() {
		return implicitlyTaggedInt2;
	}

	public void setImplicitlyTaggedInt3(ImplicitlyTaggedInteger implicitlyTaggedInt3) {
		this.implicitlyTaggedInt3 = implicitlyTaggedInt3;
	}

	public ImplicitlyTaggedInteger getImplicitlyTaggedInt3() {
		return implicitlyTaggedInt3;
	}

	public void setUntaggedChoice(UntaggedChoice untaggedChoice) {
		this.untaggedChoice = untaggedChoice;
	}

	public UntaggedChoice getUntaggedChoice() {
		return untaggedChoice;
	}

	public void setUntaggedChoice2(TaggedChoice untaggedChoice2) {
		this.untaggedChoice2 = untaggedChoice2;
	}

	public TaggedChoice getUntaggedChoice2() {
		return untaggedChoice2;
	}

	public void setTaggedChoice(UntaggedChoice taggedChoice) {
		this.taggedChoice = taggedChoice;
	}

	public UntaggedChoice getTaggedChoice() {
		return taggedChoice;
	}

	public void setTaggedChoice2(TaggedChoice taggedChoice2) {
		this.taggedChoice2 = taggedChoice2;
	}

	public TaggedChoice getTaggedChoice2() {
		return taggedChoice2;
	}

	public void setUntaggedAny(TaggedAny untaggedAny) {
		this.untaggedAny = untaggedAny;
	}

	public TaggedAny getUntaggedAny() {
		return untaggedAny;
	}

	public void setTaggedAny(UntaggedAny taggedAny) {
		this.taggedAny = taggedAny;
	}

	public UntaggedAny getTaggedAny() {
		return taggedAny;
	}

	public void setTaggedAny2(TaggedAny taggedAny2) {
		this.taggedAny2 = taggedAny2;
	}

	public TaggedAny getTaggedAny2() {
		return taggedAny2;
	}

	public void setUntaggedAnyNoDecode(TaggedAnyNoDecode untaggedAnyNoDecode) {
		this.untaggedAnyNoDecode = untaggedAnyNoDecode;
	}

	public TaggedAnyNoDecode getUntaggedAnyNoDecode() {
		return untaggedAnyNoDecode;
	}

	public void setTaggedAnyNoDecode(UntaggedAnyNoDecode taggedAnyNoDecode) {
		this.taggedAnyNoDecode = taggedAnyNoDecode;
	}

	public UntaggedAnyNoDecode getTaggedAnyNoDecode() {
		return taggedAnyNoDecode;
	}

	public void setTaggedAnyNoDecode2(TaggedAnyNoDecode taggedAnyNoDecode2) {
		this.taggedAnyNoDecode2 = taggedAnyNoDecode2;
	}

	public TaggedAnyNoDecode getTaggedAnyNoDecode2() {
		return taggedAnyNoDecode2;
	}

	public int encode(BerByteArrayOutputStream os) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (taggedAnyNoDecode2 != null) {
			codeLength += taggedAnyNoDecode2.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 19
			os.write(0xB3);
			codeLength += 1;
			return codeLength;
		}
		
		if (taggedAnyNoDecode != null) {
			sublength = taggedAnyNoDecode.encode(os);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(os, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
			os.write(0xA9);
			codeLength += 1;
			return codeLength;
		}
		
		if (untaggedAnyNoDecode != null) {
			codeLength += untaggedAnyNoDecode.encode(os, true);
			return codeLength;
		}
		
		if (taggedAny2 != null) {
			codeLength += taggedAny2.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 18
			os.write(0xB2);
			codeLength += 1;
			return codeLength;
		}
		
		if (taggedAny != null) {
			sublength = taggedAny.encode(os);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(os, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 8
			os.write(0xA8);
			codeLength += 1;
			return codeLength;
		}
		
		if (untaggedAny != null) {
			codeLength += untaggedAny.encode(os, true);
			return codeLength;
		}
		
		if (taggedChoice2 != null) {
			codeLength += taggedChoice2.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 15
			os.write(0xAF);
			codeLength += 1;
			return codeLength;
		}
		
		if (taggedChoice != null) {
			sublength = taggedChoice.encode(os);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(os, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
			os.write(0xA5);
			codeLength += 1;
			return codeLength;
		}
		
		if (untaggedChoice2 != null) {
			codeLength += untaggedChoice2.encode(os, true);
			return codeLength;
		}
		
		if (untaggedChoice != null) {
			codeLength += untaggedChoice.encode(os);
			return codeLength;
		}
		
		if (implicitlyTaggedInt3 != null) {
			codeLength += implicitlyTaggedInt3.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 23
			os.write(0x97);
			codeLength += 1;
			return codeLength;
		}
		
		if (implicitlyTaggedInt2 != null) {
			codeLength += implicitlyTaggedInt2.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 12
			os.write(0xAC);
			codeLength += 1;
			return codeLength;
		}
		
		if (implicitlyTaggedInt != null) {
			codeLength += implicitlyTaggedInt.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			os.write(0x82);
			codeLength += 1;
			return codeLength;
		}
		
		if (explicitlyTaggedInt3 != null) {
			sublength = explicitlyTaggedInt3.encode(os, true);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(os, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 21
			os.write(0xB5);
			codeLength += 1;
			return codeLength;
		}
		
		if (explicitlyTaggedInt2 != null) {
			sublength = explicitlyTaggedInt2.encode(os, true);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(os, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 11
			os.write(0xAB);
			codeLength += 1;
			return codeLength;
		}
		
		if (explicitlyTaggedInt != null) {
			sublength = explicitlyTaggedInt.encode(os, true);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(os, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
			os.write(0xA1);
			codeLength += 1;
			return codeLength;
		}
		
		if (untaggedInt3 != null) {
			codeLength += untaggedInt3.encode(os, true);
			return codeLength;
		}
		
		if (untaggedInt2 != null) {
			codeLength += untaggedInt2.encode(os, true);
			return codeLength;
		}
		
		if (untaggedInt != null) {
			codeLength += untaggedInt.encode(os, true);
			return codeLength;
		}
		
		throw new IOException("Error encoding BerChoice: No item in choice was selected.");
	}

	public int decode(InputStream is) throws IOException {
		return decode(is, null);
	}

	public int decode(InputStream is, BerTag berTag) throws IOException {

		int codeLength = 0;
		BerTag passedTag = berTag;

		if (berTag == null) {
			berTag = new BerTag();
			codeLength += berTag.decode(is);
		}

		if (berTag.equals(UntaggedInteger.tag)) {
			untaggedInt = new UntaggedInteger();
			codeLength += untaggedInt.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(ExplicitlyTaggedInteger.tag)) {
			untaggedInt2 = new ExplicitlyTaggedInteger();
			codeLength += untaggedInt2.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(ImplicitlyTaggedInteger.tag)) {
			untaggedInt3 = new ImplicitlyTaggedInteger();
			codeLength += untaggedInt3.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			codeLength += BerLength.skip(is);
			explicitlyTaggedInt = new UntaggedInteger();
			codeLength += explicitlyTaggedInt.decode(is, true);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 11)) {
			codeLength += BerLength.skip(is);
			explicitlyTaggedInt2 = new ExplicitlyTaggedInteger();
			codeLength += explicitlyTaggedInt2.decode(is, true);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 21)) {
			codeLength += BerLength.skip(is);
			explicitlyTaggedInt3 = new ImplicitlyTaggedInteger();
			codeLength += explicitlyTaggedInt3.decode(is, true);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			implicitlyTaggedInt = new UntaggedInteger();
			codeLength += implicitlyTaggedInt.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 12)) {
			implicitlyTaggedInt2 = new ExplicitlyTaggedInteger();
			codeLength += implicitlyTaggedInt2.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 23)) {
			implicitlyTaggedInt3 = new ImplicitlyTaggedInteger();
			codeLength += implicitlyTaggedInt3.decode(is, false);
			return codeLength;
		}

		untaggedChoice = new UntaggedChoice();
		int choiceDecodeLength = untaggedChoice.decode(is, berTag);
		if (choiceDecodeLength != 0) {
			return codeLength + choiceDecodeLength;
		}
		else {
			untaggedChoice = null;
		}

		if (berTag.equals(TaggedChoice.tag)) {
			untaggedChoice2 = new TaggedChoice();
			codeLength += untaggedChoice2.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			codeLength += BerLength.skip(is);
			taggedChoice = new UntaggedChoice();
			codeLength += taggedChoice.decode(is, null);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 15)) {
			taggedChoice2 = new TaggedChoice();
			codeLength += taggedChoice2.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(TaggedAny.tag)) {
			untaggedAny = new TaggedAny();
			codeLength += untaggedAny.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 8)) {
			BerLength length = new BerLength();
			codeLength += length.decode(is);
			taggedAny = new UntaggedAny();
			codeLength += taggedAny.decode(is, length.val);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 18)) {
			taggedAny2 = new TaggedAny();
			codeLength += taggedAny2.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(TaggedAnyNoDecode.tag)) {
			untaggedAnyNoDecode = new TaggedAnyNoDecode();
			codeLength += untaggedAnyNoDecode.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
			BerLength length = new BerLength();
			codeLength += length.decode(is);
			taggedAnyNoDecode = new UntaggedAnyNoDecode();
			codeLength += taggedAnyNoDecode.decode(is, length.val);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 19)) {
			taggedAnyNoDecode2 = new TaggedAnyNoDecode();
			codeLength += taggedAnyNoDecode2.decode(is, false);
			return codeLength;
		}

		if (passedTag != null) {
			return 0;
		}

		throw new IOException("Error decoding BerChoice: Tag matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os);
		code = os.getArray();
	}

	public String toString() {
		if (untaggedInt != null) {
			return "CHOICE{untaggedInt: " + untaggedInt + "}";
		}

		if (untaggedInt2 != null) {
			return "CHOICE{untaggedInt2: " + untaggedInt2 + "}";
		}

		if (untaggedInt3 != null) {
			return "CHOICE{untaggedInt3: " + untaggedInt3 + "}";
		}

		if (explicitlyTaggedInt != null) {
			return "CHOICE{explicitlyTaggedInt: " + explicitlyTaggedInt + "}";
		}

		if (explicitlyTaggedInt2 != null) {
			return "CHOICE{explicitlyTaggedInt2: " + explicitlyTaggedInt2 + "}";
		}

		if (explicitlyTaggedInt3 != null) {
			return "CHOICE{explicitlyTaggedInt3: " + explicitlyTaggedInt3 + "}";
		}

		if (implicitlyTaggedInt != null) {
			return "CHOICE{implicitlyTaggedInt: " + implicitlyTaggedInt + "}";
		}

		if (implicitlyTaggedInt2 != null) {
			return "CHOICE{implicitlyTaggedInt2: " + implicitlyTaggedInt2 + "}";
		}

		if (implicitlyTaggedInt3 != null) {
			return "CHOICE{implicitlyTaggedInt3: " + implicitlyTaggedInt3 + "}";
		}

		if (untaggedChoice != null) {
			return "CHOICE{untaggedChoice: " + untaggedChoice + "}";
		}

		if (untaggedChoice2 != null) {
			return "CHOICE{untaggedChoice2: " + untaggedChoice2 + "}";
		}

		if (taggedChoice != null) {
			return "CHOICE{taggedChoice: " + taggedChoice + "}";
		}

		if (taggedChoice2 != null) {
			return "CHOICE{taggedChoice2: " + taggedChoice2 + "}";
		}

		if (untaggedAny != null) {
			return "CHOICE{untaggedAny: " + untaggedAny + "}";
		}

		if (taggedAny != null) {
			return "CHOICE{taggedAny: " + taggedAny + "}";
		}

		if (taggedAny2 != null) {
			return "CHOICE{taggedAny2: " + taggedAny2 + "}";
		}

		if (untaggedAnyNoDecode != null) {
			return "CHOICE{untaggedAnyNoDecode: " + untaggedAnyNoDecode + "}";
		}

		if (taggedAnyNoDecode != null) {
			return "CHOICE{taggedAnyNoDecode: " + taggedAnyNoDecode + "}";
		}

		if (taggedAnyNoDecode2 != null) {
			return "CHOICE{taggedAnyNoDecode2: " + taggedAnyNoDecode2 + "}";
		}

		return "unknown";
	}

}


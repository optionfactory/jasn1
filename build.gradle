buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath group: "org.asciidoctor", name: "asciidoctorj-pdf", version: "1.5.0-alpha.11"
    classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:6.4.0"
  }
}

plugins {
  id "org.asciidoctor.convert" version "1.5.3"
}

apply plugin: "org.asciidoctor.convert"
apply from: "configuration.gradle"

asciidoctor {
  backends = ["pdf", "html5"]
  attributes	"stylesheet": "openmuc-asciidoc.css",
  "toc2": "left",
  "sampleSrc": file("src/sample/java"),
  "source-highlighter" : "coderay",
  "pdf-stylesdir": "./",
  "pdf-style": "pdf"

  resources {
    from("$sourceDir") {
      include "images/**"
    }	
  }
}

configure(allprojects) {
  version = cfgVersion
}

configure(javaProjects) {

  apply plugin: "java"
  apply plugin: "eclipse"
  apply plugin: "maven-publish"
  apply plugin: "signing"
  apply plugin: "biz.aQute.bnd.builder"
  
  group = cfgGroup

  sourceCompatibility = "17"
  targetCompatibility = "17"

  repositories { mavenCentral() }

  sourceSets {
    sample
    itest {
      compileClasspath += sourceSets.main.runtimeClasspath
    }
  }

  dependencies {
    testImplementation group: "junit", name: "junit", version: "4.12"
    itestImplementation group: "junit", name: "junit", version: "4.12"
  }

  jar {
    manifest {
      version = project.version.replace("-",".");
    }
  }
  
  task jarAll(type: Copy) {
    dependsOn(configurations.default.getAllArtifacts().getBuildDependencies())

    //only the jar file created:
    from configurations.default.getAllArtifacts().getFiles()

    if (cfgCopyDependencies) {
      if (cfgCopyToRoot) {
        into rootDir.getPath() + "/build/libs-all"
      }
      else {
        into "build/libs-all"
      }
      //includes all the dependencies:
      from configurations.default
    }
    else {
      if (cfgCopyToRoot) {
        into rootDir.getPath() + "/build/libs-all"
      }
      else {
        into "build/libs-all"
      }
    }
  }
  
  build.dependsOn {asciidoctor}
  build.dependsOn {jarAll}

  eclipse.pathVariables([GRADLE_USER_HOME:file(gradle.gradleUserHomeDir)])
  tasks.eclipse.dependsOn(cleanEclipse)


  task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = "sources"
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = "javadoc"
    from javadoc.destinationDir
  }

  artifacts {
    archives sourcesJar
    archives javadocJar
  }

  javadoc {
    exclude "**/internal/**"
    exclude "**/java-gen/**"
    exclude "**/app/**"
  }

}


task javadocAll(type: Javadoc) {

  source docProjects.collect {
    project -> project.sourceSets.main.allJava
  }

  exclude "**/internal/**"
  exclude "**/java-gen/**"
  exclude "**/app/**"

  destinationDir = new File(buildDir, "docs/javadoc-all")

  classpath = files(distributionProjects.collect { project ->
    project.sourceSets.main.compileClasspath })

  classpath += files(distributionProjects.collect { project ->
    project.sourceSets.main.output })
}


task writeSettings {
  doLast {
    Writer out = new OutputStreamWriter(new FileOutputStream("build/settings.gradle"));
    out.write("include ");
    boolean first = true;
    for (Project myproject: distributionProjects) {
      if (!myproject.getProjectDir().equals(getProjectDir())) {
        if (first == true) {
          first = false;
        }
        else {
          out.write ", ";
        }
        out.write '"' + myproject.name + '"'
      }
    }
    out .write "\n\n";

    for (Project myproject: distributionProjects) {
      if (!myproject.getProjectDir().equals(getProjectDir())) {
        println myproject.name
        out.write 'project(":' + myproject.name + '").projectDir = file("' + myproject.getProjectDir().toString().substring((int)(getProjectDir().toString().size() + 1)) + '")\n';
      }
    }

    out.close();
  }
}

task buildDistProjects {
  dependsOn(distributionProjects.build)
}

tasks.withType(Tar) {

  dependsOn(writeSettings)
  dependsOn(distributionProjects.build)
  dependsOn(javadocAll)
  dependsOn(asciidoctor)

  compression = Compression.GZIP
  
  destinationDirectory = file("build/distributions/")
}

task (tar, type: Tar) {
  archiveFileName = project.name + "-" + project.version + ".tgz"
}

task (tarFull, type: Tar) {
  dependsOn(tar)
  archiveFileName = project.name + "-" + project.version + "_full.tgz"
}
